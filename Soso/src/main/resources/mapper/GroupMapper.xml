<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="group">
	<!-- 검색 기능을 위한 -->
	<sql id="searchCondition">
		<choose>
			<when test="name != null and caption != null">
				WHERE name LIKE '%'||#{name}||'%' OR caption LIKE '%'||#{caption}||'%'
			</when>
			<when test="name != null">
				WHERE name LIKE '%'||#{name}||'%'
			</when>
			<when test="manager_id != null">
				WHERE manager_id LIKE '%'||#{manager_id}||'%'
			</when>
		</choose>
	</sql>

	<!-- 리스트  -->
	<select id="getList" parameterType="groupDto" resultType="groupDto">
      	SELECT num, name, caption, img_path, regdate, ended_dt, deadline_dt, start_dt,
			manager_id, max_people, now_people, avrg_rate, meeting_loc, meeting_time,
			genre, on_off, manager_comment, viewcount
      	FROM group_tb
      	<include refid="searchCondition"/>
      	ORDER BY num DESC
   </select>
   
   <!-- 리스트  -->
	<select id="getViewList" parameterType="groupDto" resultType="groupDto">
      	SELECT num, name, caption, img_path, regdate, ended_dt, deadline_dt, start_dt,
			manager_id, max_people, now_people, avrg_rate, meeting_loc, meeting_time,
			genre, on_off, manager_comment, viewcount
      	FROM group_tb
      	<include refid="searchCondition"/>
      	ORDER BY viewcount DESC
   </select>
   
   <select id="getRanking" parameterType="groupDto" resultType="groupDto">
        SELECT result.*, r.rate
        FROM (
            SELECT result1.*, ROWNUM AS rnum
            FROM (
                SELECT num, writer, title, caption, img_path, regdate
                FROM group_tb
                ORDER BY num DESC
            ) result1
        ) result
        INNER JOIN (
            SELECT title, ROUND(AVG(rate), 2) AS rate
            FROM board_review
            GROUP BY title
        ) r ON result.title = r.title
        ORDER BY r.rate DESC
   </select>
   
   <select id="getCount" parameterType="groupDto" resultType="int">
      SELECT NVL(MAX(ROWNUM), 0)
      FROM group_tb
      <include refid="searchCondition"/>
   </select>
   
   <insert id="insert" parameterType="groupDto">
      INSERT INTO group_tb
      (num, name, caption, img_path, viewcount, regdate, ended_dt, deadline_dt, start_dt, 
      manager_id, max_people, meeting_loc, meeting_time, genre, on_off, manager_comment)
      VALUES(group_seq.NEXTVAL, 
      #{name}, #{caption}, #{img_path}, #{viewcount}, SYSDATE, #{ended_dt}, #{deadline_dt}, #{start_dt},
      #{manager_id}, #{max_people}, #{meeting_loc}, #{meeting_time}, #{genre}, #{on_off},
      #{manager_comment})
   </insert>
   
   <select id="getData" parameterType="int" resultType="groupDto">
		SELECT result1.*
		FROM
		   (SELECT num, writer, title, caption, img_path, viewcount, regdate,
		      LAG(num, 1, 0) OVER (ORDER BY num DESC) AS prevNum,
		      LEAD(num, 1, 0) OVER (ORDER BY num DESC) AS nextNum
		   FROM group_tb) result1
		WHERE num = #{num}
   </select>
   
   <select id="getData2" parameterType="string" resultType="groupDto">
		SELECT *
		FROM
		   (SELECT num, writer, title, caption, img_path, viewcount, regdate,
		      LAG(num, 1, 0) OVER (ORDER BY num DESC) AS prevNum,
		      LEAD(num, 1, 0) OVER (ORDER BY num DESC) AS nextNum
		   FROM group_tb
		   <include refid="searchCondition"/>
		   ORDER BY num DESC)
		WHERE title = #{title}
   </select>
   <update id="update" parameterType="groupDto">
   		UPDATE group_tb
   		SET title = #{title}, caption=#{caption}, img_path=#{img_path}
   		WHERE num = #{num}
   </update>
   <delete id="delete" parameterType="int">
   		DELETE FROM group_tb
   		WHERE num=#{num}
   </delete>
   <update id="addViewCount" parameterType="int">
	    UPDATE group_tb
	    SET viewcount=viewcount+1
	    WHERE num=#{num}
	</update>
   
</mapper>